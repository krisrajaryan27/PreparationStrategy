abstract class Vs interface Vs Concrete class
==========================================================
We are talking about implementation but not completely (Just partially implementation) then we should go for abstract class.
We don't know anything about implementation just we have requirement specification. Then we should go for interface.
We are talking about implementation completely and ready to provide service, then we should go for concrete class.
When should we use interface and abstract class?
===========================================================
We don't know anything about implementation just we have requirement specification. Then we should go for interface.
We are talking about implementation but not completely (Just partially implementation) then we should go for abstract class.
Difference between interface and abstract class
==============================================================
Every method present inside interface is by default public and abstract.
Every method present inside abstract class need not be public and abstract. We can take concrete methods also.
These modifiers are not allowed for interface methods strictfp, protected, static, native, private, final, synchronized
There are no restrictions for abstract class method modifier i.e., we can use any modifier
Every variable present inside interface is public, static, final by default whether we are declare or not
Abstract class variables need not be public, final, static
For the interface variables we cannot declare the these modifiers private, protected, transient, volatile
There are no restrictions for abstract class variable modifier i.e., we can use any modifier
For the interface variables compulsory we should perform initialization at the time of declaration only.
For the abstract class variables there is no restriction like performing initialization at the time of declaration
Inside interface we can't take instance and static blocks
Inside abstract class we can take instance and static blocks
Inside interface we can’t take constructor
Inside abstract class we can take constructor


String, StringBuilder, StringBuffer
==================================================================
Mutability Difference:
------------------------------------------
String is immutable, if you try to alter their values, another object gets created, whereas StringBuffer and StringBuilder are mutable so they can change their values.

Thread-Safety Difference:
---------------------------------------------
The difference between StringBuffer and StringBuilder is that StringBuffer is thread-safe. So when the application needs to be run only in a single thread then it is better to use StringBuilder. StringBuilder is more efficient than StringBuffer.

Situations:
----------------------------------------------
If your string is not going to change use a String class because a String object is immutable.
If your string can change (example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.
If your string can change, and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous so you have thread-safety.

String in Java
=====================================================
String class represents character strings, we can instantiate String by two ways.
String str = "abc"; or String str = new String ("abc");
String is immutable in java, so its easy to share it across different threads or functions.
When we create a String using double quotes, it first looks for the String with same value in the JVM string pool, if found it returns the reference else it creates the String object and then place it in the String pool. This way JVM saves a lot of space by using same String in different threads. But if new operator is used, it explicitly creates a new String in the heap memory.
+ operator is overloaded for String and used to concatenate two Strings. Although internally it uses StringBuffer to perform this action.
String overrides equals() and hashCode() methods, two Strings are equal only if they have same characters in same order. Note that equals() method is case sensitive, so if you are not looking for case sensitive checks, you should use equalsIgnoreCase() method.
A String represents a string in the UTF-16 format
String is a final class with all the fields as final except “private int hash”. This field contains the hashCode() function value and created only when hashCode() method is called and then cached in this field. Furthermore, hash is generated using final fields of String class with some calculations, so every time hashCode() method is called, it will result in same output. For caller, its like calculations are happening every time but internally it’s cached in hash field.
String vs StringBuffer
----------------------------------------------------------------------------------------------------------------------------------------
Since String is immutable in java, whenever we do String manipulation like concat, substring etc, it generates a new String and discard the older String for garbage collection.

These are heavy operations and generate a lot of garbage in heap. So Java has provided StringBuffer and StringBuilder class that should be used for String manipulation.

StringBuffer and StringBuilder are mutable objects in java and provide append(), insert(), delete() and substring() methods for String manipulation.

StringBuffer vs StringBuilder
----------------------------------------------------------------------------------------------------------------------------------------
StringBuffer was the only choice for String manipulation till Java 1.4 but it has one disadvantage that all of its public methods are synchronized. StringBuffer provides Thread safety but on a performance cost.

In most of the scenarios, we don’t use String in multithreaded environment, so Java 1.5 introduced a new class StringBuilder that is similar with StringBuffer except thread safety and synchronization.

So if you are in a single threaded environment or don’t care about thread safety, you should use StringBuilder else use StringBuffer. 

String vs StringBuffer vs StringBuilder
-------------------------------------------------------------------------------------------------------------------------------------
String is immutable whereas StringBuffer and StringBuider are mutable classes.
StringBuffer is thread safe and synchronized whereas StringBuilder is not, thats why StringBuilder is more faster than StringBuffer.
String concat + operator internally uses StringBuffer or StringBuilder class.
For String manipulations in non-multi threaded environment, we should use StringBuilder else use StringBuffer class.